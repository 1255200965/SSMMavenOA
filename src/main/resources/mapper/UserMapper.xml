<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.ssm.oa.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="cn.ssm.oa.po.User" >
    <!--
      WARNING - @mbggenerated
    -->
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="loginName" property="loginName" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="gender" property="gender" jdbcType="VARCHAR" />
    <result column="phoneNumber" property="phoneNumber" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="description" property="description" jdbcType="VARCHAR" />
    <result column="departmentId" property="departmentId" jdbcType="BIGINT" />
  </resultMap>
  
  <resultMap id="findAllResultMap" type="cn.ssm.oa.po.User" extends="BaseResultMap">
  	<!-- 映射department属性  -->
  	<association property="department" javaType="cn.ssm.oa.po.Department">
  		<id column="departmentId" property="id"/>
  		<result column="departmentName" property="name"/>
  	</association>
  	<!-- 映射List<Role>集合属性 -->
  	<collection property="roles" ofType="cn.ssm.oa.po.Role">
  		<id column="roleId" property="id"/>
  		<result column="roleName" property="name"/>
  	</collection>
  </resultMap>
  
  <select id="findAll" resultMap="findAllResultMap">
	SELECT
		u.*,
		d.name departmentName,
		ur.roleId,
		r.name roleName
	FROM
		itcast_user u
	LEFT OUTER JOIN itcast_department d ON u.departmentId = d.id
	LEFT OUTER JOIN itcast_user_role ur ON u.id = ur.userId
	LEFT OUTER JOIN itcast_role r ON ur.roleId=r.id
  </select>
  
  <!-- 插入用户表基本数据，并且返回自增主键的值，使得随后调用的user.getId()能获取到值 -->
  <insert id="save" parameterType="cn.ssm.oa.po.User">
  <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
  	select LAST_INSERT_ID() 
  </selectKey>
  	INSERT INTO itcast_user (
		name,
		loginName,
		password,
		gender,
		phoneNumber,
		email,
		description,
		departmentId
	)
	VALUES
		(
			#{name},
			#{loginName},
			#{password},
			#{gender},
			#{phoneNumber},
			#{email},
			#{description},
			#{departmentId}
		)
  </insert>
  
  <!-- 维护新增用户岗位设置的关联关系,采用循环(批量)插入的方式
  		如：INSERT INTO itcast_user_role VALUES (139,1),(139,2)
   -->
  <insert id="inserUserRole" parameterType="cn.ssm.oa.po.User">
  	INSERT INTO itcast_user_role
	VALUES
	<foreach collection="roles" item="role" separator="," >  
        (#{id},#{role.id})  
    </foreach> 
  </insert>
  
  <!-- 根据用户的id删除和相应岗位关联的记录 -->
  <delete id="deleteUserRole" parameterType="long">
  	DELETE FROM itcast_user_role WHERE userId=#{id}
  </delete>
  
  <!-- 根据用户的id获取拥有岗位关联关系和部门关联关系(部门关联可以省略)的用户 -->
  <select id="getUserById" parameterType="long" resultMap="findAllResultMap">
  	SELECT
		u.*, d. name departmentName,
		ur.roleId,
		r. name roleName
	FROM
		itcast_user u
	LEFT OUTER JOIN itcast_department d ON u.departmentId = d.id
	LEFT OUTER JOIN itcast_user_role ur ON u.id = ur.userId
	LEFT OUTER JOIN itcast_role r ON ur.roleId = r.id
	WHERE
		u.id = #{id}
  </select>
  
  <!-- 根据用户id查询该用户的岗位列表  sqlMapConfig.xml中批量配置了别名-->
  <select id="findUserRoleListByUserId" parameterType="long" resultType="role">
  	SELECT
		r.*
	FROM
		itcast_user_role ur,
		itcast_role r
	WHERE
		ur.roleId = r.id
	AND ur.userId = #{id}
  </select>
  
  <resultMap type="user" id="findLoginUser" extends="BaseResultMap">
  	<collection property="roles" ofType="role">
  		<id column="roleId" property="id"/>
  		<result column="roleName" property="name"/>
  		<collection property="privileges" ofType="privilege">
  			<id column="privilegeId" property="id"/>
  			<result column="privilegeName" property="name"/>
  			<result column="privilegeUrl" property="url"/>
  		</collection>
  	</collection>
  </resultMap>
  
  <!-- 根据登录名和密码查询登录用户包括关联的岗位数据及岗位所拥有的权限数据 -->
  <select id="findByLoginNameAndPassword" parameterType="user" resultMap="findLoginUser">
	SELECT
		u.*, ur.roleId,
		r. NAME roleName,
		p.id privilegeId,
		p. NAME privilegeName,
		p.url privilegeUrl
	FROM
		itcast_user u
	LEFT OUTER JOIN itcast_user_role ur ON u.id = ur.userId
	LEFT OUTER JOIN itcast_role r ON ur.roleId = r.id
	LEFT OUTER JOIN itcast_role_privilege rp ON r.id = rp.roleId
	LEFT OUTER JOIN itcast_privilege p ON rp.privilegeId = p.id
	WHERE
		u.loginName = #{loginName}
	AND u. PASSWORD = #{password}
  </select>
  
</mapper>